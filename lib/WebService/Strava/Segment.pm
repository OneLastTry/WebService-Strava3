package WebService::Strava::Segment;

use v5.010;
use strict;
use warnings;
use Moo;
use Method::Signatures;
use Scalar::Util qw(looks_like_number);
use Scalar::Util::Reftype;
use Carp qw(croak);
use Data::Dumper;

# ABSTRACT: A Strava Segment Object

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  my $segment = WebService::Strava::Segment->new( auth => $auth, id => '229781' );

=head1 DESCRIPTION

  Upon instantiation will retrieve the segment matching the id.
  Requires a pre-authenticated WebService::Strava::Auth object.

=cut

# Validation functions

my $Num = sub {
  croak "$_[0] isn't a number" unless looks_like_number $_[0];
};

my $Ref = sub {
  croak "auth isn't a 'WebService::Strava::Auth' object!" unless reftype( $_[0] )->class eq "WebService::Strava::Auth";
};

# Debugging hooks in case things go weird. (Thanks @pjf)

around BUILDARGS => sub {
  my $orig  = shift;
  my $class = shift;
  
  if ($WebService::Strava::DEBUG) {
    warn "Building task with:\n";
    warn Dumper(\@_), "\n";
  }
  
  return $class->$orig(@_);
};

# Authentication Object
has 'auth'            => ( is => 'ro', required => 1, isa => $Ref );

# Segment Details
has 'id'                      => ( is => 'ro', required => 1, isa => $Num );

sub BUILD {
  my $self = shift;
  my $segment = $self->auth->get_api("/segments/$self->{id}");
  
  # TODO: Research a better way to do this.
  $self->{name} = $segment->{name};
  $self->{activity_type} = $segment->{activity_type};
  $self->{distance} = $segment->{distance};
  $self->{average_grade} = $segment->{average_grade};
  $self->{maximum_grade} = $segment->{maxiumum_grade};
  $self->{elevation_high} = $segment->{elevation_high};
  $self->{elevation_low} = $segment->{elevation_low};
  $self->{start_latlng} = $segment->{start_latlng};
  $self->{end_latlng} = $segment->{end_latlng};
  $self->{climb_category} = $segment->{climb_category};
  $self->{city} = $segment->{city};
  $self->{state} = $segment->{state};
  $self->{private} = $segment->{private};
  $self->{starred} = $segment->{starred};
  $self->{star_count} = $segment->{star_count};
  $self->{map} = $segment->{map};
  $self->{country} = $segment->{country};
  $self->{athlete_count} = $segment->{athlete_count};
  $self->{resource_state} = $segment->{resource_state};
  $self->{effort_count} = $segment->{effort_count};
  $self->{distance} = $segment->{distance};
  $self->{total_elevation_gain} = $segment->{total_elevation_gain};

  return;
}

=method list_efforts()

  $segment->list_efforts([number])'

Returns an array of efforts associated with this segment. Will 
return 25 efforts unless 'number' is specified with a larger number.

=cut

method list_efforts(:$number) {
  if (! $number) {
    $number = '25'
  }

  my $raw_efforts = $self->auth->get("/segments/$self->{id}/all_efforts?per_page=$number");
  print Dumper($raw_efforts);

  #return @efforts;
};

1;
