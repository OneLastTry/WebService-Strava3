package WebService::Strava::Segment;

use v5.010;
use strict;
use warnings;
use Moo;
use Method::Signatures;
use Scalar::Util qw(looks_like_number);
use Scalar::Util::Reftype;
use Carp qw(croak);
use Data::Dumper;

# ABSTRACT: A Strava Segment Object

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  my $segment = WebService::Strava::Segment->new( auth => $auth, id => '229781' );

=head1 DESCRIPTION

  Upon instantiation will retrieve the segment matching the id.
  Requires a pre-authenticated WebService::Strava::Auth object.

=cut

# Validation functions

my $Num = sub {
  croak "$_[0] isn't a number" unless looks_like_number $_[0];
};

my $Ref = sub {
  croak "auth isn't a 'WebService::Strava::Auth' object!" unless reftype( $_[0] ) == "WebService::Strava::Auth";
}

# Debugging hooks in case things go weird. (Thanks @pjf)

around BUILDARGS => sub {
  my $orig  = shift;
  my $class = shift;
  
  if ($WebService::Strava::DEBUG) {
    warn "Building task with:\n";
    warn Dumper(\@_), "\n";
  }
  
  return $class->$orig(@_);
};

# Authentication Object
has 'auth'            => ( is => 'auth', required => 1, isa => $Ref );

# Segment Details
has 'id'              => ( is => 'ro', required => 1, isa => $Num );
has 'name'            => ( is => 'ro' );
has 'activity_type'   => ( is => 'ro' );
has 'distance'        => ( is => 'ro' );
has 'average_grade'   => ( is => 'ro' );
has 'maximum_grade'   => ( is => 'ro' );
has 'elevation_high'  => ( is => 'ro' );
has 'elevation_low'   => ( is => 'ro' );
has 'start_latlng'    => ( is => 'ro' );
has 'end_latlng'      => ( is => 'ro' );
has 'climb_category'  => ( is => 'ro' );
has 'city'            => ( is => 'ro' );
has 'state'           => ( is => 'ro' );
has 'country'         => ( is => 'ro' );
has 'private'         => ( is => 'ro' );
has 'starred'         => ( is => 'ro' );

sub BUILD {
  my ($self) = @_;
  
  $self->auth->get("/segments/$self->{id}");



  return;
}

=method list_efforts()

  $segment->list_efforts([number])'

Returns an array of efforts associated with this segment. Will 
return 25 efforts unless 'number' is specified with a larger number.

=cut

sub list_efforts {
  my ($self, $number) = @_;

  if (! $number) {
    $number = '25'
  }

  my $raw_efforts = $self->auth->get("/segments/$self->{id}/all_efforts?per_page=$number");
  print Dumper($raw_efforts);

  #return @efforts;
};

1;
